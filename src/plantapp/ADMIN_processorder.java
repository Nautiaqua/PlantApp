/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package plantapp;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author WINDOWS
 */
public class ADMIN_processorder extends javax.swing.JFrame {
    connection2 dbConn;
    DefaultTableModel PlantModels = new DefaultTableModel();
    DefaultTableModel cartModel = new DefaultTableModel();
    SpinnerNumberModel amountModel = new SpinnerNumberModel(1, 1, 100, 1);

    /**
     * Creates new form USER_login
     */
    public ADMIN_processorder() {
        initComponents(); 
        // Connects once again!
        dbConn = new connection2();
        dbConn.ActivateConn();
        
        System.out.println("Session email: " + ALL_login.sessionEmail);
        
        setupTable();
        addData();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        mainpanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_cm = new javax.swing.JTable();
        search_catalogue = new javax.swing.JTextField();
        addtocart = new javax.swing.JButton();
        amountadd = new javax.swing.JSpinner();
        email_lbl1 = new javax.swing.JLabel();
        btn_close = new javax.swing.JButton();
        mainpanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cart = new javax.swing.JTable();
        email_lbl2 = new javax.swing.JLabel();
        finalize = new javax.swing.JButton();
        cartprice = new javax.swing.JLabel();
        clearbtn = new javax.swing.JButton();
        removebtn = new javax.swing.JButton();
        email_lbl4 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 280, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 260, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainpanel2.setBackground(new java.awt.Color(72, 96, 51));
        mainpanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainpanel2MouseClicked(evt);
            }
        });
        mainpanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table_cm.setModel(PlantModels);
        table_cm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_cmMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table_cm);

        mainpanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 610, 650));

        search_catalogue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_catalogueActionPerformed(evt);
            }
        });
        mainpanel2.add(search_catalogue, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 610, 20));

        addtocart.setBackground(new java.awt.Color(238, 235, 235));
        addtocart.setForeground(new java.awt.Color(72, 96, 51));
        addtocart.setText("Add to Cart");
        addtocart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtocartActionPerformed(evt);
            }
        });
        mainpanel2.add(addtocart, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, -1, 30));

        amountadd.setModel(amountModel);
        mainpanel2.add(amountadd, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, -1, -1));

        email_lbl1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        email_lbl1.setForeground(new java.awt.Color(255, 255, 255));
        email_lbl1.setText("Amount:");
        mainpanel2.add(email_lbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, -1, -1));

        btn_close.setBackground(new java.awt.Color(238, 235, 235));
        btn_close.setForeground(new java.awt.Color(72, 96, 51));
        btn_close.setText("Close");
        btn_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeActionPerformed(evt);
            }
        });
        mainpanel2.add(btn_close, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 100, 30));

        getContentPane().add(mainpanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 0, 650, 760));

        mainpanel.setBackground(new java.awt.Color(238, 235, 235));
        mainpanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainpanelMouseClicked(evt);
            }
        });
        mainpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setViewportView(cart);

        mainpanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 360, 590));

        email_lbl2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        email_lbl2.setForeground(new java.awt.Color(72, 96, 51));
        email_lbl2.setText("Process Order");
        mainpanel.add(email_lbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        finalize.setBackground(new java.awt.Color(72, 96, 51));
        finalize.setForeground(new java.awt.Color(255, 255, 255));
        finalize.setText("Finalize Transaction");
        finalize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizeActionPerformed(evt);
            }
        });
        mainpanel.add(finalize, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 87, -1, 30));

        cartprice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cartprice.setForeground(new java.awt.Color(72, 96, 51));
        cartprice.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cartprice.setText("Total Price: 0.00");
        mainpanel.add(cartprice, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, -1, -1));

        clearbtn.setBackground(new java.awt.Color(72, 96, 51));
        clearbtn.setForeground(new java.awt.Color(255, 255, 255));
        clearbtn.setText("Clear");
        clearbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbtnActionPerformed(evt);
            }
        });
        mainpanel.add(clearbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 87, -1, 30));

        removebtn.setBackground(new java.awt.Color(72, 96, 51));
        removebtn.setForeground(new java.awt.Color(255, 255, 255));
        removebtn.setText("Remove");
        removebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removebtnActionPerformed(evt);
            }
        });
        mainpanel.add(removebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 87, -1, 30));

        email_lbl4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        email_lbl4.setForeground(new java.awt.Color(72, 96, 51));
        email_lbl4.setText("Cart");
        mainpanel.add(email_lbl4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));

        getContentPane().add(mainpanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 760));

        setSize(new java.awt.Dimension(1063, 765));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addtocartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtocartActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRow = table_cm.getSelectedRow();
            int amount = (int) amountadd.getValue(); 
            boolean inCart = false;

            String catalogueID = table_cm.getValueAt(selectedRow, 0).toString();
            String plantName = table_cm.getValueAt(selectedRow, 1).toString();
            String price = table_cm.getValueAt(selectedRow, 4).toString();
            int maxStock = Integer.parseInt(table_cm.getValueAt(selectedRow, 5).toString());
            System.out.println(maxStock);

            int cartcount = cart.getRowCount();
        
            if (amount != 0) {
                if (cartcount != 0) {
                    for (int i = 0; i < cartcount; i++) {
                        String currentItemID = cart.getValueAt(i, 0).toString();
                        // Adds an amount if its already in
                        if (catalogueID.equals(currentItemID)) { 
                            inCart = true;
                            int currentAmount = Integer.parseInt(cart.getValueAt(i, 3).toString());
                            
                            if (currentAmount >= maxStock) {
                                cartModel.setValueAt(maxStock, i, 3);
                                JOptionPane.showMessageDialog(null, "Cannot add more as it would exceed current stock.");
                                break;
                                
                            } else if (currentAmount < maxStock) {
                                int newAmount = currentAmount + amount;
                                cartModel.setValueAt(newAmount, i, 3);
                                cartPriceCalc();
                                break;
                            }
                        }
                    }

                    if (inCart == false) {
                        Object[] newItem = {catalogueID, plantName, price, amount};
                        cartModel.addRow(newItem);
                        cartPriceCalc();
                    }
                } else if (cartcount == 0) {
                    Object[] newItem = {catalogueID, plantName, price, amount};
                    cartModel.addRow(newItem);
                    cartPriceCalc();
                }
            } else if (amount == 0) {
                JOptionPane.showMessageDialog(null, "Please select an amount");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please select a plant to add");
        }
        
    }//GEN-LAST:event_addtocartActionPerformed

    private void removebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removebtnActionPerformed
        // TODO add your handling code here:
        int selectedIndex = (int) cart.getSelectedRow();
        try {
            cartModel.removeRow(selectedIndex);
            cartPriceCalc();
        } catch (Exception e){
            JOptionPane.showMessageDialog(null, "Please select a row to delete");
        }
    }//GEN-LAST:event_removebtnActionPerformed

    private void mainpanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainpanel2MouseClicked
        // TODO add your handling code here:
        table_cm.clearSelection();
        cart.clearSelection();
    }//GEN-LAST:event_mainpanel2MouseClicked

    private void mainpanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainpanelMouseClicked
        // TODO add your handling code here:
        table_cm.clearSelection();
        cart.clearSelection();
    }//GEN-LAST:event_mainpanelMouseClicked

    private void finalizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizeActionPerformed
        // TODO add your handling code here:
        int cartcount = cart.getRowCount();
        int catacount = table_cm.getRowCount();
        
        for (int i = 0; i < cartcount; i++) {
            try {
                
                
                
                String plantName = cart.getValueAt(i, 1).toString();
                String plantID = cart.getValueAt(i, 0).toString();
                int amountToSell = Integer.parseInt(cart.getValueAt(i, 3).toString());
                int stockQuantity = 0;
                
                for (int j = 0; j < catacount; j++) {
                    String currentID = table_cm.getValueAt(j, 0).toString();
                    if (plantID.equals(currentID)) {
                        stockQuantity = Integer.parseInt(table_cm.getValueAt(j, 5).toString());
                        break;
                    }
                }
                
                
                System.out.println("Selling: " + plantName + " " + plantID + " with the amount of " + amountToSell);
                
                int newSTOCK_QUANTITY = stockQuantity - amountToSell;
                
                
                String stmt = "UPDATE PLANT_CATALOGUE SET STOCK_QUANTITY = ? WHERE CATALOGUE_ID = ?";
                PreparedStatement pstmt = dbConn.conn.prepareStatement(stmt);
                pstmt.setString(1, Integer.toString(newSTOCK_QUANTITY));
                pstmt.setString(2, plantID);
                
                String stmt2 = "UPDATE PLANT_SOLD SET AMOUNT_SOLD = ? WHERE CATALOGUE_ID = ?";
                PreparedStatement pstmt2 = dbConn.conn.prepareStatement(stmt2);
                pstmt2.setString(1, Integer.toString(amountToSell));
                pstmt2.setString(2, plantID);
                
                pstmt.executeUpdate();
                pstmt2.executeUpdate();
                dbConn.conn.commit();
                System.out.println("Sell done!");
                System.out.println(" ");
                
                
                refreshData();
                cartModel.setRowCount(0);
            } catch (SQLException ex) {
                Logger.getLogger(ADMIN_processorder.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
    }//GEN-LAST:event_finalizeActionPerformed

    private void clearbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearbtnActionPerformed
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to clear the cart?");
        if (result == JOptionPane.YES_OPTION) {
            cartModel.setRowCount(0);
            cartprice.setText("Total Price: 0.00");
        }
    }//GEN-LAST:event_clearbtnActionPerformed

    private void table_cmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_cmMouseClicked
        // TODO add your handling code here:
        int spinnerValue = (int) amountadd.getValue();
        int selectedRow = table_cm.getSelectedRow();
        int selectedStock = Integer.parseInt(table_cm.getValueAt(selectedRow, 5).toString());
        
        amountModel.setMaximum(selectedStock);
        if (spinnerValue > selectedStock) {
            amountadd.setValue(selectedStock);
        }
    }//GEN-LAST:event_table_cmMouseClicked

    private void btn_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeActionPerformed

        ADMIN_dashboard dashboard = new ADMIN_dashboard();
        this.dispose();
        dashboard.setVisible(true);
    }//GEN-LAST:event_btn_closeActionPerformed

    private void search_catalogueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_catalogueActionPerformed
        String searchQuery = search_catalogue.getText().trim().toLowerCase();
        DefaultTableModel model = (DefaultTableModel) table_cm.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        table_cm.setRowSorter(sorter);

        if (searchQuery.isEmpty()) {
            sorter.setRowFilter(null);
        } else {
            RowFilter<DefaultTableModel, Object> filter = new RowFilter<DefaultTableModel, Object>() {
                @Override
                public boolean include(Entry<? extends DefaultTableModel, ? extends Object> entry) {
                    String plantName = entry.getStringValue(1).toLowerCase();
                    String scientificName = entry.getStringValue(3).toLowerCase();

                    return plantName.contains(searchQuery) || scientificName.contains(searchQuery);
                }
            };
            sorter.setRowFilter(filter);
        }
    }//GEN-LAST:event_search_catalogueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
            */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(ADMIN_processorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(ADMIN_processorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(ADMIN_processorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(ADMIN_processorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
            //</editor-fold>
            UIManager.setLookAndFeel("com.formdev.flatlaf.FlatLightLaf");
            
            
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new ADMIN_processorder().setVisible(true);
                }
            });
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ADMIN_processorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ADMIN_processorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ADMIN_processorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ADMIN_processorder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void setupTable() {
        // For the display table.
        PlantModels = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Make all cells non-editable
            }
        };
        
        String[] columns = {"CATALOGUE_ID", "PLANT_NAME", "CATEGORY", "SCIENTIFIC_NAME", "PRICE", "STOCK", "TOTAL_STOCK"};
        for (String col : columns) {
            PlantModels.addColumn(col);
        }
        
        // For the cart
        cartModel = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Make all cells non-editable
            }
        };
        
        String[] cartColumns = {"CATALOGUE_ID", "PLANT_NAME", "PRICE", "AMOUNT"};
        for (String col : cartColumns) {
            cartModel.addColumn(col);
        }
        
        table_cm.setModel(PlantModels);
        cart.setModel(cartModel);
    }
    
    public void addData() {
        try {
            String query = "SELECT * FROM PLANT_CATALOGUE";
            PreparedStatement stmt = dbConn.conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            
            int columnCount = rs.getMetaData().getColumnCount();
            
            while (rs.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = rs.getObject(i + 1);
            }
            PlantModels.addRow(rowData);
        }
            
        } catch (SQLException ex) {
            Logger.getLogger(ADMIN_processorder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void refreshData() {
        try {
            PlantModels.setRowCount(0);
            String query = "SELECT * FROM PLANT_CATALOGUE";
            PreparedStatement stmt = dbConn.conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            
            int columnCount = rs.getMetaData().getColumnCount();
            
            while (rs.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = rs.getObject(i + 1);
            }
            PlantModels.addRow(rowData);
        }
            
        } catch (SQLException ex) {
            Logger.getLogger(ADMIN_processorder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void cartPriceCalc() {
        int cartcount = cart.getRowCount();
        double cartPrice = 0;
        if (cartcount != 0) {
            for (int i = 0; i < cartcount; i++) {
                int currentPrice = Integer.parseInt(cart.getValueAt(i, 2).toString());
                int currentAmount = Integer.parseInt(cart.getValueAt(i, 3).toString());
                currentPrice = currentPrice * currentAmount;
                cartPrice += currentPrice;
                currentPrice = 0;
            }
            cartprice.setText("Total Price: " + String.format("%.2f", cartPrice));   
        } else if (cartcount == 0) {
            cartprice.setText("Total Price: 0.00");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtocart;
    private javax.swing.JSpinner amountadd;
    private javax.swing.JButton btn_close;
    private javax.swing.JTable cart;
    private javax.swing.JLabel cartprice;
    private javax.swing.JButton clearbtn;
    private javax.swing.JLabel email_lbl1;
    private javax.swing.JLabel email_lbl2;
    private javax.swing.JLabel email_lbl4;
    private javax.swing.JButton finalize;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel mainpanel;
    private javax.swing.JPanel mainpanel2;
    private javax.swing.JButton removebtn;
    private javax.swing.JTextField search_catalogue;
    private javax.swing.JTable table_cm;
    // End of variables declaration//GEN-END:variables
}
